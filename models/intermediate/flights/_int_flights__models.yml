models: # Указываем свойство модели
  - name: fct_bookings # Указываем имя модели, которое совпадает с именем файла.sql
    description: Факты бронирований # Описание
    docs:
      show: true # Нужно ли показывать в сгенерированной документации текущую модель, поумолчанию true
      node_color: red # Цвет модели в lineage документации (при запуске в терминале dbt docs generate и dbt docs serve откроется документация)
    latest_version: 1 # Для создания одной модели нескольких разные версий и при использовании модели можно указать конкретную версию
    versions: # from {{ ref('source', v=1) }}
      - v: 1
    deprecation_date: 2026-01-01 00:00:00.00+00:00 # Дата, когда данная модель/версия станет устаревшей. Когда наступит указанная дата, то при сборке проекта будет предупреждение, что модель устарела
    access: public # доступы private - не видны другим командам(данную модель можно использовать только внутри той же самой папки с моделями), protected - данную модель могут использовать все внутри текущего проекта dbt, public - есть возможность использовтаь модели из соседнего проекта dbt
    config: # конфигурация модели
      contract: { enforced: true }
    meta: # Указание любых пар ключ-значение, которые будут добавлены в документацию и в общий файл манифест.json
      owner: "timofeevsergey@gmail.com"
      contact_tg: Jossbeaumont
      status: n_dev
    # dbt_build отрабатывают constraint и test, dbt_run отрабатывают consraint, но не test
    columns:
      - name: book_ref
        data_type: varchar(8)
        constraints: # Проверки данных в модели. Если проверка указанная тут не будет пройдена, то модель не обновится. Для ephemeral и view не работает
          - type: not_null
      - name: book_date
        data_type: timestamptz
      - name: total_amount
        data_type: numeric(10,2)
        constraints:
          - type: check
            expression: "total_amount > 0" # Проверка, что значение больше нуля
        tests: # Проверки данных в модели. Если проверка не будет пройдена, то модель обновится, но после её обновления, будет сообщение о том, что тест провален
          - not_null # Проверка, что колонка total_amount не NULL
        meta:
          owner: finance_team
        quote: true # Нужно ли при генерации SQL запроса обрамлять название колонки ковычками(мне кажется лучше всегда true)
        # tags: # Метки которыми мы помечаем модели, группы моделей для того, чтобы с одной группой выполнять какую то общую операцию
        # granularity:
  - name: fct_ticket_flights
    description: Таблица с информацией о билетах и связанных с ними рейсах включая класс обслуживания и стоимость
    docs:
      show: true
      node_color: green
    meta:
      owner: "timofeevsergey@gmail.com"
    columns:
      - name: ticket_no
        data_type: bpchar(13)
        constraints:
          - type: check
            expression: ticket_no not NULL
      - name: flight_id
        data_type: int(4)
        constraints:
          - type: check
            expression: flight_id > 0
      - name: fare_conditions
        data_type: varchar(10)
      - name: amount
        data_type: numeric(10,2)
